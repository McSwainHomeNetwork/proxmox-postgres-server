name: 'Terraform'

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: [self-hosted, Linux]
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Install deps
      run: sudo apt update && sudo apt install -y unzip nodejs

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.5
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Validate
      id: validate
      run: terraform validate
      continue-on-error: true

    - name: Terraform Plan
      id: plan
      run: terraform plan
      continue-on-error: true
      env:
        TF_VAR_ssh_authorized_keys: ${{ secrets.TF_VAR_SSH_AUTHORIZED_KEYS }}
        TF_VAR_proxmox_url: ${{ secrets.TF_VAR_PROXMOX_URL }}
        TF_VAR_pve_host: ${{ secrets.TF_VAR_PVE_HOST }}
        TF_VAR_pve_password: ${{ secrets.TF_VAR_PVE_PASSWORD }}
        TF_VAR_postgres_k3s_password: ${{ secrets.TF_VAR_POSTGRES_K3S_PASSWORD }}
        TF_VAR_postgres_admin_password: ${{ secrets.TF_VAR_POSTGRES_ADMIN_PASSWORD }}
        PM_PASS: ${{ secrets.PM_PASS }}
        PM_USER: ${{ secrets.PM_USER }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Status
      if: steps.plan.outcome == 'failure' || steps.validate.outcome == 'failure' || steps.fmt.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      env:
        TF_VAR_ssh_authorized_keys: ${{ secrets.TF_VAR_SSH_AUTHORIZED_KEYS }}
        TF_VAR_proxmox_url: ${{ secrets.TF_VAR_PROXMOX_URL }}
        TF_VAR_pve_host: ${{ secrets.TF_VAR_PVE_HOST }}
        TF_VAR_pve_password: ${{ secrets.TF_VAR_PVE_PASSWORD }}
        TF_VAR_postgres_k3s_password: ${{ secrets.TF_VAR_POSTGRES_K3S_PASSWORD }}
        TF_VAR_postgres_admin_password: ${{ secrets.TF_VAR_POSTGRES_ADMIN_PASSWORD }}
        PM_PASS: ${{ secrets.PM_PASS }}
        PM_USER: ${{ secrets.PM_USER }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
